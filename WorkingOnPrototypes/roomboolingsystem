<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Room Booking System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Warm Neutrals & Teal -->
    <!-- Application Structure Plan: A task-oriented dashboard structure. The primary focus is the interactive calendar for immediate booking tasks. Controls are placed at the top for intuitive filtering (by room/date). A modal is used for the booking form to keep the user in the main context. Secondary information like 'My Bookings' and feature explanations are placed below the main tool to avoid clutter, creating a clear visual hierarchy. This structure is chosen to directly support the primary user goal: finding and booking a room quickly. -->
    <!-- Visualization & Content Choices: 
        - Report Info: Room Availability -> Goal: Inform/Interact -> Viz: Interactive HTML Grid Calendar -> Interaction: Click slots, filter by room -> Justification: Most intuitive way to show time-based availability.
        - Report Info: System Features (Conflict Checker, etc.) -> Goal: Inform -> Viz: Tabbed content section with icons -> Interaction: Click tabs to reveal info -> Justification: Organizes descriptive text cleanly without cluttering the UI.
        - Report Info: Synthetic Data (Implied Usage) -> Goal: Compare -> Viz: Horizontal Bar Chart (Chart.js) -> Interaction: Hover for details -> Justification: Bar charts are ideal for comparing usage across different rooms.
        - Report Info: Booking Process -> Goal: Organize/Interact -> Viz: Modal Form -> Interaction: Fill and submit -> Justification: Keeps user context on the calendar page.
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #F8F7F4;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            height: 300px;
            max-height: 400px;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 350px;
            }
        }
        .calendar-grid {
            grid-template-columns: 60px repeat(7, 1fr);
        }
        .calendar-slot:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            z-index: 10;
        }
        .modal {
            transition: opacity 0.25s ease;
        }
        .tab-active {
            border-color: #14B8A6;
            color: #14B8A6;
            background-color: #F0FDFA;
        }
    </style>
</head>
<body class="text-gray-800">

    <div id="app" class="container mx-auto p-4 sm:p-6 lg:p-8">

        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Interactive Room Booking System</h1>
            <p class="mt-2 text-lg text-gray-600">A modern solution for efficient lab and classroom scheduling.</p>
        </header>

        <main class="space-y-12">
            
            <section id="booking-dashboard" class="bg-white p-6 rounded-2xl shadow-lg">
                <div class="mb-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-1">Booking Dashboard</h2>
                    <p class="text-gray-500">Select a room and a time slot to make a booking.</p>
                </div>

                <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
                    <div>
                        <label for="room-select" class="block text-sm font-medium text-gray-700 mb-1">Select Room/Lab</label>
                        <select id="room-select" class="w-full md:w-64 rounded-lg border-gray-300 shadow-sm focus:border-teal-500 focus:ring-teal-500">
                        </select>
                    </div>
                    <div class="flex items-center justify-center space-x-2">
                        <button id="prev-week" class="p-2 rounded-md bg-gray-100 hover:bg-gray-200 transition">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
                        </button>
                        <span id="week-display" class="font-semibold text-lg text-gray-700 w-48 text-center">This Week</span>
                        <button id="next-week" class="p-2 rounded-md bg-gray-100 hover:bg-gray-200 transition">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
                        </button>
                    </div>
                </div>

                <div id="calendar-container" class="overflow-x-auto">
                    <div id="calendar" class="grid calendar-grid gap-1">
                    </div>
                </div>
                
                <div class="flex justify-center items-center space-x-6 mt-6 text-sm">
                    <div class="flex items-center"><span class="w-4 h-4 rounded-full bg-teal-100 border border-teal-300 mr-2"></span>Available</div>
                    <div class="flex items-center"><span class="w-4 h-4 rounded-full bg-amber-100 border border-amber-300 mr-2"></span>Pending</div>
                    <div class="flex items-center"><span class="w-4 h-4 rounded-full bg-rose-100 border border-rose-300 mr-2"></span>Booked</div>
                </div>
            </section>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
                <section id="my-bookings" class="bg-white p-6 rounded-2xl shadow-lg">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">My Upcoming Bookings</h2>
                    <div id="booking-list" class="space-y-3">
                        <p class="text-gray-500">You have no upcoming bookings. Click an available slot on the calendar to create one.</p>
                    </div>
                </section>

                <section id="room-stats" class="bg-white p-6 rounded-2xl shadow-lg">
                     <h2 class="text-2xl font-bold text-gray-800 mb-4">Room Utilization (This Week)</h2>
                     <p class="text-gray-500 mb-4">This chart shows the total hours booked for each room this week, helping to identify the most in-demand resources.</p>
                     <div class="chart-container">
                        <canvas id="utilizationChart"></canvas>
                     </div>
                </section>
            </div>
            
            <section id="how-it-works" class="bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold text-gray-800 mb-1">How The System Works</h2>
                <p class="text-gray-500 mb-6">Our system uses smart features to make booking simple and conflict-free.</p>
                <div class="flex flex-wrap border-b border-gray-200">
                    <button data-tab="checker" class="feature-tab py-3 px-4 font-medium text-gray-500 hover:text-teal-600 border-b-2 border-transparent transition tab-active">üõ°Ô∏è Auto Conflict Checker</button>
                    <button data-tab="uploader" class="feature-tab py-3 px-4 font-medium text-gray-500 hover:text-teal-600 border-b-2 border-transparent transition">üì§ Timetable Uploader</button>
                    <button data-tab="email" class="feature-tab py-3 px-4 font-medium text-gray-500 hover:text-teal-600 border-b-2 border-transparent transition">‚úâÔ∏è Email Confirmations</button>
                </div>
                <div id="tab-content" class="pt-6">
                    <div id="checker-content" class="tab-pane">
                        <h3 class="font-bold text-lg mb-2">Prevents Double Bookings Automatically</h3>
                        <p class="text-gray-600">Our smart assistant works silently in the background. When you try to book a slot, it instantly verifies that the time is still available before confirming your request. If someone else books it just seconds before you, the system will immediately notify you to pick another time, ensuring no overlaps ever occur.</p>
                    </div>
                    <div id="uploader-content" class="tab-pane hidden">
                        <h3 class="font-bold text-lg mb-2">Bulk Schedule Uploads for Admins</h3>
                        <p class="text-gray-600">Administrators have access to a powerful tool that allows them to upload an entire semester's schedule in one go using a simple CSV file. The system processes the file, automatically runs conflict checks for every entry, and populates the calendar with all official classes, saving hours of manual work.</p>
                    </div>
                    <div id="email-content" class="tab-pane hidden">
                        <h3 class="font-bold text-lg mb-2">Keeps Everyone Informed</h3>
                        <p class="text-gray-600">The system sends automated emails at every step. You'll receive a notification when your booking is pending, confirmed, or declined. Admins are also notified of new requests. This ensures clear communication and keeps everyone up-to-date with their schedule.</p>
                    </div>
                </div>
            </section>

        </main>
    </div>

    <div id="booking-modal" class="modal fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 opacity-0 pointer-events-none">
        <div class="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md transform scale-95 transition-transform">
            <h2 class="text-2xl font-bold mb-2">New Booking Request</h2>
            <p id="modal-details" class="text-gray-600 mb-6">Details for your new booking.</p>
            <form id="booking-form">
                <div class="space-y-4">
                    <div>
                        <label for="booking-purpose" class="block text-sm font-medium text-gray-700">Purpose</label>
                        <select id="booking-purpose" required class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-teal-500 focus:ring-teal-500">
                            <option>Project Work</option>
                            <option>Study Session</option>
                            <option>Practical Exam</option>
                            <option>Guest Lecture</option>
                            <option>Other</option>
                        </select>
                    </div>
                    <div>
                        <label for="attendees" class="block text-sm font-medium text-gray-700">Number of Attendees</label>
                        <input type="number" id="attendees" min="1" value="1" required class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-teal-500 focus:ring-teal-500">
                    </div>
                </div>
                <div class="mt-8 flex justify-end space-x-3">
                    <button type="button" id="cancel-booking" class="px-4 py-2 rounded-lg bg-gray-100 text-gray-700 font-medium hover:bg-gray-200 transition">Cancel</button>
                    <button type="submit" class="px-4 py-2 rounded-lg bg-teal-500 text-white font-medium hover:bg-teal-600 transition">Submit Request</button>
                </div>
            </form>
        </div>
    </div>
    
    <div id="confirmation-toast" class="fixed bottom-5 right-5 bg-gray-900 text-white py-3 px-6 rounded-lg shadow-xl opacity-0 translate-y-10 transition-all duration-300">
        <p>Your booking request has been submitted!</p>
    </div>


<script>
document.addEventListener('DOMContentLoaded', () => {
    
    const MOCK_DATA = {
        rooms: [
            { id: 1, name: 'Computer Lab 1' },
            { id: 2, name: 'Physics Lab' },
            { id: 3, name: 'Seminar Hall A' },
            { id: 4, name: 'Chemistry Lab' },
            { id: 5, name: 'Project Room B' }
        ],
        bookings: [
            { id: 1, roomId: 1, userId: 1, purpose: 'Data Structures Practical', date: '2025-08-04', time: 9, status: 'booked' },
            { id: 2, roomId: 1, userId: 2, purpose: 'AI Project Work', date: '2025-08-05', time: 14, status: 'pending' },
            { id: 3, roomId: 2, userId: 1, purpose: 'Optics Experiment', date: '2025-08-06', time: 11, status: 'booked' },
            { id: 4, roomId: 3, userId: 3, purpose: 'Guest Lecture', date: '2025-08-04', time: 10, status: 'booked' },
            { id: 5, roomId: 1, userId: 1, purpose: 'Study Session', date: '2025-08-07', time: 15, status: 'pending' },
            { id: 6, roomId: 4, userId: 2, purpose: 'Titration Practical', date: '2025-08-08', time: 13, status: 'booked' },
            { id: 7, roomId: 5, userId: 3, purpose: 'Final Year Project', date: '2025-08-05', time: 10, status: 'booked' },
        ],
        myBookings: []
    };

    let currentWeekOffset = 0;
    let selectedSlot = null;

    const roomSelect = document.getElementById('room-select');
    const calendarEl = document.getElementById('calendar');
    const weekDisplay = document.getElementById('week-display');
    const prevWeekBtn = document.getElementById('prev-week');
    const nextWeekBtn = document.getElementById('next-week');
    const bookingListEl = document.getElementById('booking-list');
    
    const modal = document.getElementById('booking-modal');
    const modalDetails = document.getElementById('modal-details');
    const bookingForm = document.getElementById('booking-form');
    const cancelBtn = document.getElementById('cancel-booking');
    
    const toast = document.getElementById('confirmation-toast');

    function init() {
        populateRoomSelect();
        render();
        attachEventListeners();
        renderMyBookings();
        renderChart();
    }

    function populateRoomSelect() {
        MOCK_DATA.rooms.forEach(room => {
            const option = document.createElement('option');
            option.value = room.id;
            option.textContent = room.name;
            roomSelect.appendChild(option);
        });
    }

    function render() {
        renderCalendar();
    }

    function getWeekDateRange(offset = 0) {
        const today = new Date();
        today.setDate(today.getDate() + offset * 7);
        const dayOfWeek = today.getDay();
        const startOfWeek = new Date(today);
        startOfWeek.setDate(today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1));
        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6);
        return { start: startOfWeek, end: endOfWeek };
    }

    function renderCalendar() {
        calendarEl.innerHTML = '';
        const selectedRoomId = parseInt(roomSelect.value);
        const { start, end } = getWeekDateRange(currentWeekOffset);
        
        const options = { month: 'short', day: 'numeric' };
        weekDisplay.textContent = `${start.toLocaleDateString(undefined, options)} - ${end.toLocaleDateString(undefined, options)}`;

        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        const times = Array.from({ length: 10 }, (_, i) => 9 + i);

        calendarEl.innerHTML += `<div class="font-bold text-center py-2"></div>`;
        for (let i = 0; i < 7; i++) {
            const d = new Date(start);
            d.setDate(start.getDate() + i);
            calendarEl.innerHTML += `<div class="font-bold text-center py-2 text-sm">${days[d.getDay()]}<br>${d.getDate()}</div>`;
        }

        times.forEach(time => {
            calendarEl.innerHTML += `<div class="font-semibold text-center text-xs text-gray-500 p-2">${time}:00</div>`;
            for (let day = 0; day < 7; day++) {
                const currentDate = new Date(start);
                currentDate.setDate(start.getDate() + day);
                const dateString = currentDate.toISOString().split('T')[0];

                const booking = MOCK_DATA.bookings.find(b => b.roomId === selectedRoomId && b.date === dateString && b.time === time);
                
                const slot = document.createElement('div');
                slot.dataset.date = dateString;
                slot.dataset.time = time;
                slot.classList.add('p-2', 'rounded-lg', 'min-h-[40px]', 'transition', 'duration-200', 'cursor-pointer', 'calendar-slot');
                
                if (booking) {
                    slot.classList.add(
                        booking.status === 'booked' ? 'bg-rose-100' : 'bg-amber-100',
                        booking.status === 'booked' ? 'border-rose-300' : 'border-amber-300',
                        'border', 'pointer-events-none'
                    );          slot.textContent = booking.purpose.substring(0, 10) + '...';
                    slot.title = booking.purpose;
                } else {
                    slot.classList.add('bg-teal-100', 'hover:bg-teal-200', 'border', 'border-teal-300');
                }
                calendarEl.appendChild(slot);
            }
        });
    }
    
    function renderMyBookings() {
        bookingListEl.innerHTML = '';
        if (MOCK_DATA.myBookings.length === 0) {
            bookingListEl.innerHTML = `<p class="text-gray-500">You have no upcoming bookings.</p>`;
            return;
        }

        MOCK_DATA.myBookings.forEach(booking => {
            const roomName = MOCK_DATA.rooms.find(r => r.id === booking.roomId).name;
            const el = document.createElement('div');
            el.className = 'p-4 rounded-lg flex items-center justify-between bg-gray-50 border';
            el.innerHTML = `
                <div>
                    <p class="font-bold text-gray-800">${roomName}</p>
                    <p class="text-sm text-gray-600">${booking.purpose}</p>
                    <p class="text-xs text-gray-500">${new Date(booking.date).toDateString()} at ${booking.time}:00</p>
                </div>
                <span class="text-sm font-medium px-3 py-1 rounded-full ${booking.status === 'pending' ? 'bg-amber-100 text-amber-800' : 'bg-teal-100 text-teal-800'}">
                    ${booking.status}
                </span>
            `;
            bookingListEl.appendChild(el);
        });
    }

    function renderChart() {
        const ctx = document.getElementById('utilizationChart').getContext('2d');
        const roomLabels = MOCK_DATA.rooms.map(r => r.name);
        const usageData = MOCK_DATA.rooms.map(room => {
            return MOCK_DATA.bookings.filter(b => b.roomId === room.id && b.status === 'booked').length;
        });

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: roomLabels,
                datasets: [{
                    label: 'Hours Booked',
                    data: usageData,
                    backgroundColor: 'rgba(20, 184, 166, 0.6)',
                    borderColor: 'rgba(15, 118, 110, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: '#333',
                        titleFont: { size: 14 },
                        bodyFont: { size: 12 },
                        padding: 10,
                        cornerRadius: 8
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true,
                        grid: {
                            color: '#e5e7eb'
                        }
                    },
                    y: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }

    function handleSlotClick(e) {
        if (e.target.classList.contains('calendar-slot') && !e.target.classList.contains('pointer-events-none')) {
            selectedSlot = e.target.dataset;
            const roomName = roomSelect.options[roomSelect.selectedIndex].text;
            const date = new Date(selectedSlot.date).toDateString();
            modalDetails.textContent = `Room: ${roomName} on ${date} at ${selectedSlot.time}:00`;
            showModal();
        }
    }

    function showModal() {
        modal.classList.remove('opacity-0', 'pointer-events-none');
        modal.querySelector('div').classList.remove('scale-95');
    }

    function hideModal() {
        modal.classList.add('opacity-0', 'pointer-events-none');
        modal.querySelector('div').classList.add('scale-95');
        bookingForm.reset();
        selectedSlot = null;
    }

    function handleBookingSubmit(e) {
        e.preventDefault();
        const newBooking = {
            id: MOCK_DATA.bookings.length + 1,
            roomId: parseInt(roomSelect.value),
            userId: 99, // Mock current user
            purpose: e.target.elements['booking-purpose'].value,
            date: selectedSlot.date,
            time: parseInt(selectedSlot.time),
            status: 'pending'
        };

        MOCK_DATA.bookings.push(newBooking);
        MOCK_DATA.myBookings.push(newBooking);
        
        hideModal();
        render();
        renderMyBookings();
        showToast("Booking request submitted!");
    }

    function showToast(message) {
        toast.textContent = message;
        toast.classList.remove('opacity-0', 'translate-y-10');
        setTimeout(() => {
            toast.classList.add('opacity-0', 'translate-y-10');
        }, 3000);
    }

    function handleTabClick(e) {
        if (!e.target.classList.contains('feature-tab')) return;

        document.querySelectorAll('.feature-tab').forEach(tab => tab.classList.remove('tab-active'));
        e.target.classList.add('tab-active');

        document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.add('hidden'));
        document.getElementById(`${e.target.dataset.tab}-content`).classList.remove('hidden');
    }

    function attachEventListeners() {
        roomSelect.addEventListener('change', render);
        prevWeekBtn.addEventListener('click', () => { currentWeekOffset--; render(); });
        nextWeekBtn.addEventListener('click', () => { currentWeekOffset++; render(); });
        calendarEl.addEventListener('click', handleSlotClick);
        cancelBtn.addEventListener('click', hideModal);
        modal.addEventListener('click', (e) => {
            if (e.target.id === 'booking-modal') hideModal();
        });
        bookingForm.addEventListener('submit', handleBookingSubmit);
        document.querySelector('#how-it-works').addEventListener('click', handleTabClick);
    }

    init();
});
</script>

</body>
</html>
